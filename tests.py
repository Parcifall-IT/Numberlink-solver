import unittest
from sat import solve_puzzle


class TestPuzzleSolver(unittest.TestCase):
    def test_3x3_case(self):
        matrix = [
            [1, 0, 1],
            [2, 0, 2],
            [3, 0, 3]
        ]
        expected = [
            (1, {(0, 0), (0, 1), (0, 2)}),
            (2, {(1, 0), (1, 1), (1, 2)}),
            (3, {(2, 0), (2, 1), (2, 2)})
        ]
        solution = solve_puzzle(matrix)
        self.assertEqual(solution, expected)

    def test_7x7_case(self):
        matrix = [
            [0, 0, 0, 4, 0, 0, 0],
            [0, 3, 0, 0, 2, 5, 0],
            [0, 0, 0, 3, 1, 0, 0],
            [0, 0, 0, 5, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 0, 0, 0],
            [2, 0, 0, 0, 4, 0, 0]
        ]
        expected = [
            (1, {(2, 4), (3, 4), (4, 4), (4, 3), (4, 2), (5, 2)}),
            (2, {(1, 4), (1, 3), (1, 2), (0, 2), (0, 1), (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)}),
            (3, {(1, 1), (2, 1), (2, 2), (2, 3)}),
            (4, {(0, 3), (0, 4), (0, 5), (0, 6), (1, 6), (2, 6), (3, 6), (4, 6), (5, 6), (6, 6), (6, 5), (6, 4)}),
            (5, {(1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (5, 4), (5, 3), (6, 3), (6, 2), (6, 1), (5, 1), (4, 1), (3, 1), (3, 2), (3, 3)})
        ]
        solution = solve_puzzle(matrix)
        self.assertEqual(solution, expected)

    def test_large_case(self):
        matrix = [
            [16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 1, 10, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0],
            [0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0],
            [0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 21, 0, 0, 0, 0, 17, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0],
            [0, 0, 0, 10, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 9, 0, 0, 0, 0, 11, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0],
            [0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0],
            [0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 4, 7, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22]
        ]
        expected = [
            (1, {(4, 9), (4, 6), (3, 10), (2, 11), (1, 12), (1, 18), (1, 15), (2, 20), (3, 9), (5, 6), (4, 8), (1, 14), (2, 19), (1, 17), (4, 7), (3, 11), (1, 13), (2, 12), (2, 18), (1, 16), (2, 21)}),
            (2, {(6, 12), (6, 18), (6, 15), (6, 14), (5, 17), (7, 19), (6, 13), (5, 16), (6, 16), (7, 18), (5, 18)}),
            (3, {(10, 15), (9, 16), (7, 20), (10, 14), (11, 13), (8, 20), (10, 13), (10, 20), (10, 16), (9, 18), (10, 19), (9, 17), (10, 18), (9, 20)}),
            (4, {(13, 1), (14, 1), (11, 3), (12, 3), (13, 3), (14, 3), (10, 3), (14, 2)}),
            (5, {(7, 4), (6, 2), (1, 2), (8, 4), (1, 5), (1, 4), (4, 2), (7, 3), (7, 2), (2, 2), (1, 6), (3, 2), (1, 3), (5, 2)}),
            (6, {(9, 13), (9, 19), (8, 17), (9, 12), (8, 16), (9, 15), (11, 12), (8, 19), (9, 14), (8, 18), (12, 11), (8, 15), (10, 12), (11, 11)}),
            (7, {(3, 4), (5, 4), (9, 2), (9, 5), (11, 2), (13, 2), (2, 5), (1, 9), (6, 5), (8, 5), (10, 2), (9, 4), (2, 4), (2, 7), (1, 11), (1, 8), (12, 2), (4, 4), (5, 5), (9, 3), (1, 7), (2, 6), (1, 10), (7, 5)}),
            (8, {(5, 15), (4, 16), (5, 14), (5, 13), (4, 15), (4, 18), (4, 17), (5, 12)}),
            (9, {(11, 1), (12, 1), (9, 1), (10, 1)}),
            (10, {(3, 1), (5, 1), (0, 2), (8, 3), (0, 5), (0, 8), (0, 14), (0, 11), (0, 17), (7, 1), (1, 21), (8, 2), (0, 1), (0, 7), (0, 4), (0, 10), (0, 16), (2, 1), (0, 13), (0, 19), (6, 1), (1, 20), (2, 22), (4, 1), (8, 1), (1, 1), (0, 3), (0, 9), (0, 6), (0, 12), (0, 15), (0, 18), (1, 19), (1, 22)}),
            (11, {(4, 10), (5, 8), (9, 6), (5, 7), (6, 7), (5, 10), (7, 6), (8, 6), (6, 6), (5, 9)}),
            (12, {(13, 8), (10, 11), (11, 10), (13, 7), (12, 10), (13, 10), (10, 10), (13, 9), (13, 6)}),
            (13, {(6, 21), (12, 16), (12, 19), (4, 21), (14, 19), (5, 19), (8, 21), (0, 23), (10, 21), (13, 14), (0, 20), (2, 23), (6, 20), (12, 15), (12, 21), (12, 18), (14, 21), (4, 20), (4, 23), (0, 22), (13, 13), (13, 19), (1, 23), (7, 21), (6, 19), (12, 17), (4, 19), (3, 23), (4, 22), (14, 20), (9, 21), (0, 21), (11, 21), (13, 15), (13, 21)}),
            (14, {(8, 14), (8, 13), (8, 12), (9, 11), (8, 11)}),
            (15, {(3, 8), (3, 7), (2, 10), (2, 9), (4, 5), (3, 6), (3, 5), (2, 8)}),
            (16, {(4, 0), (8, 0), (10, 0), (1, 0), (15, 2), (12, 0), (3, 0), (14, 0), (5, 0), (7, 0), (15, 1), (9, 0), (0, 0), (11, 0), (2, 0), (13, 0), (15, 0), (15, 3), (6, 0)}),
            (17, {(15, 21), (14, 16), (12, 22), (14, 13), (14, 22), (13, 17), (15, 20), (7, 22), (14, 12), (14, 18), (14, 15), (9, 22), (13, 16), (11, 22), (13, 22), (15, 19), (15, 22), (6, 22), (14, 14), (8, 22), (13, 18), (10, 22), (15, 18)}),
            (18, {(2, 14), (2, 17), (2, 16), (2, 13), (3, 13), (3, 12), (2, 15)}),
            (19, {(4, 3), (6, 4), (2, 3), (3, 3), (5, 3), (6, 3)}),
            (20, {(8, 8), (11, 7), (10, 8), (11, 6), (7, 9), (8, 9), (9, 8), (11, 5), (11, 8)}),
            (21, {(7, 17), (12, 7), (14, 7), (12, 13), (14, 10), (10, 9), (11, 14), (13, 5), (13, 11), (11, 17), (7, 10), (7, 16), (7, 13), (6, 17), (12, 9), (14, 6), (12, 6), (12, 12), (14, 9), (9, 10), (11, 16), (10, 17), (7, 12), (7, 15), (12, 5), (12, 8), (14, 5), (14, 11), (12, 14), (14, 8), (9, 9), (8, 10), (11, 9), (11, 15), (13, 12), (7, 11), (7, 14)}),
            (22, {(11, 23), (5, 21), (9, 23), (7, 23), (12, 23), (13, 23), (8, 23), (14, 23), (15, 23), (10, 23), (5, 23), (5, 20), (6, 23), (5, 22)}),
            (23, {(12, 4), (14, 4), (4, 12), (3, 16), (3, 19), (10, 6), (3, 22), (15, 5), (15, 11), (7, 7), (15, 8), (6, 11), (15, 14), (6, 8), (15, 17), (4, 14), (3, 18), (4, 11), (3, 15), (3, 21), (9, 7), (11, 4), (10, 5), (13, 4), (15, 4), (15, 7), (15, 13), (15, 10), (15, 16), (6, 10), (3, 14), (5, 11), (4, 13), (3, 17), (8, 7), (10, 4), (14, 17), (3, 20), (10, 7), (15, 6), (15, 9), (15, 12), (6, 9), (7, 8), (15, 15)}),
            (24, {(11, 20), (12, 20), (13, 20), (11, 19), (11, 18)})
        ]
        solution = solve_puzzle(matrix)
        self.assertEqual(solution, expected)

    def test_no_path(self):
        matrix = [
            [1, 2],
            [2, 1]
        ]
        expected = "Задача не имеет решения"
        solution = solve_puzzle(matrix)
        self.assertEqual(solution, expected)

    def test_borders(self):
        matrix = [
            [1, 0, -1, 1, 0],
            [-1, 0, -1, -1, 0],
            [0, 0, -1, -1, 0],
            [0, -1, 0, 0, 0],
            [0, 0, 0, -1, -1]
        ]
        expected = [
            (1, {(0, 1), (2, 4), (4, 0), (0, 4), (2, 1), (3, 4), (0, 0), (1, 1), (0, 3), (2, 0), (4, 2), (3, 0), (1, 4), (3, 3), (3, 2), (4, 1)})
        ]
        solution = solve_puzzle(matrix)
        self.assertEqual(solution, expected)


if __name__ == '__main__':
    unittest.main()
